<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>数学 - Tag - JayaYuan&#39;s Blog</title>
        <link>https://example.com/tags/%E6%95%B0%E5%AD%A6/</link>
        <description>数学 - Tag - JayaYuan&#39;s Blog</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>jayayuan@outlook.com (JayaYuan)</managingEditor>
            <webMaster>jayayuan@outlook.com (JayaYuan)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Mon, 20 Sep 2021 18:35:20 &#43;0800</lastBuildDate><atom:link href="https://example.com/tags/%E6%95%B0%E5%AD%A6/" rel="self" type="application/rss+xml" /><item>
    <title>分解质因数</title>
    <link>https://example.com/primefactorization/</link>
    <pubDate>Mon, 20 Sep 2021 18:35:20 &#43;0800</pubDate>
    <author>JayaYuan</author>
    <guid>https://example.com/primefactorization/</guid>
    <description><![CDATA[ 算术基本定理：任何一个大于1的自然数 N，如果N不为质数，那么N可以唯一分解成有限个质数的乘积
1 2 3 4 5 6 7 8 9 10 11 12 13 14 List&lt;Integer&gt; primeFactorization(int n) { // 分解得到的质数列表（不去重） List&lt;Integer&gt; res = new ArrayList&lt;Integer&gt;(); /* 短除法：从最小的质数开始分解 */ for (int i = 2; i * i &lt;= n; i++) { // 判断n（即模余数）是否为质数只需要遍历到sqrt(n) while (n % i == 0) { res.add(i); n /= i; } } return res; } ]]></description>
</item>
</channel>
</rss>
